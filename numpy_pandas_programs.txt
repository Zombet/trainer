program1.py

import numpy as np
import scipy

array = np.array([[1, 1, 3, 3, 4, 4, 4, 5, 7, 7, 8, 9, 12]])

mean   = np.mean(array)
median = np.median(array)
mode   = scipy.mode(array)

print(f'Mean = ', mean)
print(f'Median = ', median)
print(f'Mode = ', mode)
--------------------------------
program2.py

import numpy as np

array1 = np.array([[1, 2], [3, 4]]) 
array2 = np.array([[1, 2], [3, 4]]) 

print(array1 == array2) # Does element wise comparison and returns truth value for every comparison which is again stored in the respective sized np array

comparison = (array1 == array2)
equal_arrays = comparison.all() # Here all the truth values of the inferred np array is taken and if all are True then it returns True, else False.

print(equal_arrays)
--------------------------------
program3.py

import numpy as np

# Problem1: Finding indices where spendings are greater than 100

# Explanation: Using np.where() to find indices where the condition is met

week_spendings = np.array([50, 120, 30, 40, 200, 90, 300])
high_spend = np.where(spendings > 100)
print(high_spenders) # Output: Indices where the values are greater than 100
--------------------------------
program4.py
# In a np array of spendings of the week, find the highest spending.

import numpy as np
week_spendings = np.array([50, 120, 30, 40, 200, 90, 300])
highest_spending = max(week_spendings)
print(high_spendings)
-------------------------------------------------------
program5.py
# In a np array of spendings of the week, find the highest spending and the day.

import numpy as np
week_spendings = np.array([50, 120, 30, 40, 200, 90, 300])
index = 1
big_spending = week_spendings[0]
index = np.argmax(week_spendings)
days = {1:'mon', 2'tue', 3:'wed', 4:'thus', 5'fri', 6:'sat', 7:'sun'}
print(big_spending, days[index])

'''
for i in range(len(week_spendings)):
	if week_spendings[i] > big_spending:
		big_spending = week_spendings[i]
		index = i
'''
-------------------------------------------------------
program6.py
# Replacing values less than 50 with 0 in an array

# Explanation: Using np.where() to replace values meeting the condition

expenses = np.array([20, 60, 5, 80, 45, 90])
modified_expenses = np.where(expenses < 50, 0, expenses)
print(modified_expenses)  # Output: [ 0 60  0 80  0 90]
-------------------------------------------------------
Program7.py

#Generating random floating-point numbers between 0 and 1

# Explanation: Using np.random.rand() to create a random array of given shape

random_data = np.random.rand(3, 4) # Creates a 3x4 array with random values
print(random_data)
-------------------------------------------------------
program8.py

import math

user_number = int(input('Enter a number of your choice between [0 and 9]: '))
system_number = math.random(10)
if system_number == user_number:
	print('CrorePati')
else:
	print('RoadPati')
-------------------------------------------------------
program9.py

import pandas as pd

def read_excel_file():
    #Define the path to the Excel file
    file_path = './students.xlsx'

    # Read the Excel file into a pandas DataFrame
    df = pd.read_excel(file_path)

	# Display the first few rows of the DataFrame
    print(df.count())
    print(df.head())
    print(df.tail())

def read_excel_file1():
    file_path = './students.xlsx'
    df = pd.read_excel(file_path)
    for index, row in df.iterrows():
        print(row[0], '  ', row[1])

def read_excel_file2():
    file_path = './students.xlsx'
    df = pd.read_excel(file_path)
    for row in df.iterrows():
       print(row[1][0], row[1][1])
------------------------------------------------------------
program10.py

#Difference between np.arange() and np.linspace()

# Explanation: np.arange() generates values with a fixed step, while np.linspace() generates a set number of equally spaced values

sequence_arange = np.arange(1, 10, 3)  # Generates values from 1 to 10 with a step of 3
sequence_linspace = np.linspace(0, 100, 5)  # Generates 5 equally spaced values between 0 and 100
print("Using arange:", sequence_arange)
print("Using linspace:", sequence_linspace)
------------------------------------------------------------
program11.py

Output of np.arange(1, 10, 3)

# Explanation: np.arange() generates numbers starting at 1, stopping before 10, with step size 3

sequence = np.arange(1, 10, 3)
print(sequence)  # Output: [ 1  4  7]
------------------------------------------------------------
program11.py

# Generating 23 equally spaced values between 0 and 100

# Explanation: Using np.linspace() to generate specified number of values in a range

values = np.linspace(0, 100, 23)
print("Generated values:", values)
print("Total count:", len(values))
------------------------------------------------------------
program12.py

# Creating a DataFrame

# Explanation: Using pandas to create a DataFrame from a dictionary

import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35],
        'Salary': [50000, 60000, 70000]}
df = pd.DataFrame(data)
print(df)
------------------------------------------------------------
program13.py

# Reading a CSV file and checking for missing values

# Explanation: Using pd.read_csv() to load data and checking for missing values using isnull()

df = pd.read_csv('data.csv')  # Reads the CSV file
df.head()  # Displays the first 5 rows
print(df.isnull().sum())  # Counts missing values in each column
------------------------------------------------------------
program14.py

# Filtering rows where Salary > 50000

# Explanation: Using boolean indexing to filter rows based on Salary column

high_salary = df[df['Salary'] > 50000]  # Filters rows based on Salary
print(high_salary)
------------------------------------------
program15.py

# Sorting data by Salary in descending order

# Explanation: Using sort_values() to arrange rows based on Salary

df_sorted = df.sort_values(by='Salary', ascending=False)
print(df_sorted)
------------------------------------------------------------
program16.py

Grouping data by Age and calculating mean Salary

# Explanation: Using groupby() to aggregate data and compute mean salary

grouped = df.groupby('Age')['Salary'].mean() 
# Groups by Age and calculates mean salary
print(grouped)

select avg(salary) as Avg_Salary from employees group by age;
------------------------------------------------------------
program17.py

# Creating a DataFrame from a dictionary

# Explanation: Creating a DataFrame using a dictionary with multiple columns

data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
}
df = pd.DataFrame(data)  # Converts dictionary into a DataFrame
print(df)
------------------------------------------------------------
program18.py

# Checking for missing values in a DataFrame

# Explanation: Using isnull() to check for missing values and count occurrences

df = pd.DataFrame({
    'Name': ['Alice', 'Bob', None],
    'Age': [25, None, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
})
print(df.isnull())  # Identifies missing values
print(df.isnull().sum())  # Counts missing values per column
------------------------------------------------------------
program18.py

Selecting a single column from a DataFrame

# Explanation: Accessing specific columns from the DataFrame

print(df['Name'])  # Access column using dictionary-style indexing
print(df.Age)      # Access column using dot notation


------------------------------------------------------------
program19.py

np_array_data = np.array([[1, 2, 3, 4, 5,], [0, 2, 4, 6, 8], [1, 3, 5, 7, 9], [2, 3, 5, 7, 11], [11, 13, 17, 19, 23]], int)

print(np_array_data[:, 3]
print(np_array_data[1:4, 3]
print(np_array_data[:, 2:3]
print(np_array_data[1:, 1:4]
------------------------------------------------------------
program20.py

# Filtering rows in Pandas based on a condition

# Explanation: Using boolean indexing to filter rows where Age > 25

filtered_df = df[df1['Age'] > 25]  # Selects rows where Age > 25
print(filtered_df)
------------------------------------------------------------
program21.py


------------------------------------------------------------
program22.py

------------------------------------------------------------
HACKATHON PROBLEMS:

1. Car wash App
sales:
	{id, cust_id, date, service_id, date} Optional
	id, customer, service, date, amount
	
	a. the month when we can bring in discounts
	b. the month when we can bring surcharge
	c. give a coupon to the valuable customer who did not turn up since over 2 months
	d. display the monthly sales of a year
	e. divide the day into 4 parts and display the sales using pie chart
	
2. Kanti Sweets
inventory:
	sweet_id,
	
	a. Which sweet sells more in a specific month
	b. when the company revenues are highest during the year
	c. Yearly sales data comparision
	d. which sweet was wasted the most (sold less)
	
3. Kings coffee
	types of coffee available
	sources to buy coffee seeds
	
	a. From the past years of data of buying seeds and the sales, help the cooffee shop to analyse and infer the best cofee seeds supplier.
	b. Compare the sales of instant coffee and filter coffee
	c. With the customer feedback, help the cooffee shop owner to know if water quantity should be reduced or increased. 
	d. With the sales data help the owner to compare the sales of coffee with sugar, jagaury and sugar free.
	
4. 
5.
6.
7.
8.

Kaggle

